// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RAI.Lab03.s184934.Web.Data;

#nullable disable

namespace RAI.Lab03.s184934.Web.Migrations
{
    [DbContext(typeof(WarehouseDbContext))]
    [Migration("20231129212526_SaleEntry")]
    partial class SaleEntry
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("AnionMineralWater", b =>
                {
                    b.Property<Guid>("AnionsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MineralWaterId")
                        .HasColumnType("TEXT");

                    b.HasKey("AnionsId", "MineralWaterId");

                    b.HasIndex("MineralWaterId");

                    b.ToTable("AnionMineralWater");
                });

            modelBuilder.Entity("CationMineralWater", b =>
                {
                    b.Property<Guid>("CationsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MineralWaterId")
                        .HasColumnType("TEXT");

                    b.HasKey("CationsId", "MineralWaterId");

                    b.HasIndex("MineralWaterId");

                    b.ToTable("CationMineralWater");
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasDiscriminator<string>("Type").HasValue("Company");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.Delivery", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<uint>("NumberOfPallets")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("TEXT");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.Ion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ion");

                    b.HasDiscriminator<string>("Type").HasValue("Ion");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.MineralWater", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PackagingId")
                        .HasColumnType("TEXT");

                    b.Property<float>("Ph")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ProducerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PackagingId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("TypeId");

                    b.ToTable("MineralWaters");
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.Packaging", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Volume")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Packaging");
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.Pallet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeliveryId")
                        .HasColumnType("TEXT");

                    b.Property<uint>("SizeOfPallet")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("WaterId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("WaterId");

                    b.ToTable("Pallets");
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.SaleEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WaterId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.HasIndex("WaterId");

                    b.ToTable("SaleEntry");
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.WaterMagazine", b =>
                {
                    b.Property<Guid>("WaterId")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("WaterId");

                    b.ToTable("WaterMagazine");
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.WaterType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WaterTypes");
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.Producer", b =>
                {
                    b.HasBaseType("RAI.Lab03.s184934.Core.Entities.Company");

                    b.HasDiscriminator().HasValue("Producer");
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.Supplier", b =>
                {
                    b.HasBaseType("RAI.Lab03.s184934.Core.Entities.Company");

                    b.HasDiscriminator().HasValue("Supplier");
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.Anion", b =>
                {
                    b.HasBaseType("RAI.Lab03.s184934.Core.Entities.Ion");

                    b.HasDiscriminator().HasValue("Anion");
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.Cation", b =>
                {
                    b.HasBaseType("RAI.Lab03.s184934.Core.Entities.Ion");

                    b.HasDiscriminator().HasValue("Cation");
                });

            modelBuilder.Entity("AnionMineralWater", b =>
                {
                    b.HasOne("RAI.Lab03.s184934.Core.Entities.Anion", null)
                        .WithMany()
                        .HasForeignKey("AnionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RAI.Lab03.s184934.Core.Entities.MineralWater", null)
                        .WithMany()
                        .HasForeignKey("MineralWaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CationMineralWater", b =>
                {
                    b.HasOne("RAI.Lab03.s184934.Core.Entities.Cation", null)
                        .WithMany()
                        .HasForeignKey("CationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RAI.Lab03.s184934.Core.Entities.MineralWater", null)
                        .WithMany()
                        .HasForeignKey("MineralWaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.Delivery", b =>
                {
                    b.HasOne("RAI.Lab03.s184934.Core.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.MineralWater", b =>
                {
                    b.HasOne("RAI.Lab03.s184934.Core.Entities.Packaging", "Packaging")
                        .WithMany()
                        .HasForeignKey("PackagingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RAI.Lab03.s184934.Core.Entities.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RAI.Lab03.s184934.Core.Entities.WaterType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Packaging");

                    b.Navigation("Producer");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.Pallet", b =>
                {
                    b.HasOne("RAI.Lab03.s184934.Core.Entities.Delivery", null)
                        .WithMany("Pallets")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RAI.Lab03.s184934.Core.Entities.MineralWater", "Water")
                        .WithMany()
                        .HasForeignKey("WaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Water");
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.SaleEntry", b =>
                {
                    b.HasOne("RAI.Lab03.s184934.Core.Entities.Sale", null)
                        .WithMany("SaleEntries")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RAI.Lab03.s184934.Core.Entities.MineralWater", "Water")
                        .WithMany()
                        .HasForeignKey("WaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Water");
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.WaterMagazine", b =>
                {
                    b.HasOne("RAI.Lab03.s184934.Core.Entities.MineralWater", null)
                        .WithOne()
                        .HasForeignKey("RAI.Lab03.s184934.Core.Entities.WaterMagazine", "WaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.Delivery", b =>
                {
                    b.Navigation("Pallets");
                });

            modelBuilder.Entity("RAI.Lab03.s184934.Core.Entities.Sale", b =>
                {
                    b.Navigation("SaleEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
